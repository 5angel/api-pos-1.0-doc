# group pos_general Сценарий работы
Сценарий работы с POS API состоит из нескольких шагов:
+ Получение токена для точки продаж
+ Загрузка необходимых для работы данных (настройки точки продаж, справочник товаров и услуг, справочник контрагентов)
+ Открытие розничной смены
+ Совершение операций (кассовые внесения и выплаты, продажи, возвраты по продажам)
+ Закрытие розничной смены

Для получения токена для точки продаж необходимо воспользоваться двумя административными ресурсами:
+ Ресурсом для получения списка точек продаж
+ Ресурсом для получения токена для выбранной точки продаж

Важное отличие административных ресурсов в том, что авторизация на них происходит с помощью пары логин-пароль от
учётной записи сервиса МойСклад (Basic Auth). На всех остальных ресурсах необходима авторизация по полученному токену для точки продаж.
<br>После получения токена для авторизации можно начинать работу от лица POS терминала, открывать и закрывать смены, запрашивать данные и проводить операции.

### Ограничения на доступ к данным
При работе с POS API убедитесь:
+ Что активна текущая точка продаж, для которой открываются смены, создаются операции, и, в рамках которой посылаются запросы.
+ Что пользователь, от имени которого посылаются запросы, авторизован соответствующим для данного ресурса способом (способ авторизации указан для каждого ресурса POS API в секции "Авторизация"),
и, в случае авторизации по token для точки продаж, он является активным пользователем и кассиром на данной точке продаж.


### Пример
Ниже, в качестве примера, описан один из возможных сценариев работы с POS API, состоящий из следующих шагов:
+ Получение списка точек продаж
+ Получение токена для точки продаж
+ Загрузка настроек точки продаж
+ Открытие смены
+ Загрузка списка товаров и услуг
+ Создание продажи
+ Закрытие смены

## Получить точки продаж [/admin/retailstore]
Для начала работы нам нужно выбрать точку, с которой мы будем осуществлять розничные операции.
Для этого запросим список точек продаж.

### Получить точки продаж [GET]
Запрос списка точек продаж. Basic авторизация с помощью пары `логин:пароль` закодированных в BASE64.<br>
В ответ получим список точек продаж.

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление списка точек продаж.
  + Headers
    Authorization:Basic YWRtaW5AcmVxd3k6MTIzMTIz
  + Body
        <!-- include(body/scenario/get_retailstore.json) -->

## Назначить токен для точки продаж [/admin/attach/{id}]
После того как мы выбрали точку продаж нужно получить для неё токен авторизации.
Используем id нашей точки продаж (`5d4d2ca2-7b1d-11e6-8a84-bae500000060`). И получаем необходимый нам токен.

+ Parameters
  + id: `5d4d2ca2-7b1d-11e6-8a84-bae500000060` (required, string) - id точки продаж, которой назначается token

### Назначить токен для точки продаж [POST]
+ Response 201 (application/json)
Успешный запрос. Результат - токен для последующей аутентификации на данной точке продаж.
  + Headers
  Authorization:Basic YWRtaW5AcmVxd3k6MTIzMTIz
  + Body
        <!-- include(body/scenario/token.json) -->


## Настройки точки продаж [/settings/retailstore/]
Теперь авторизуемся по полученному токену и запросим настройки точки продаж.
### Настройки точки продаж [GET]

+ Headers
    Lognex-Pos-Auth-Token: 6ab89be1ae6ff147753335ee8da948e42612233b
    Lognex-Pos-Auth-Cashier-Uid: example@admin

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление настроек точки продаж.
  + Body
        <!-- include(body/pos_retailstore/get_by_id.json) -->

## Открытие смены [/rpc/openshift/]
Перейдём непосредственно к работе. Для того, чтобы начать создавать продажи нужно открыть смену.
### Открытие смены [PUT]
Для открытия смены нам потребуется **syncId**. Нужно сгенерировать его самому (на клиенте) и отправить на сервер в запросе на открытие смены.

+ Request Пример (application/json)
Пример запроса на открытие смены.
  + Headers
      Lognex-Pos-Auth-Token: 6ab89be1ae6ff147753335ee8da948e42612233b
      Lognex-Pos-Auth-Cashier-Uid: example@admin
  + Body
        <!-- include(body/scenario/open_request.json) -->
+ Response 204
  + Body
        <!-- include(body/scenario/open_put.json) -->

## Загрузка товаров [/entity/assortment]
Для создания продаж потребуется справочник товаров и услуг. Самое время его загрузить.
### Загрузка товаров [GET]

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление ассортимента товаров.

  + Headers
      Lognex-Pos-Auth-Token: 6ab89be1ae6ff147753335ee8da948e42612233b
      Lognex-Pos-Auth-Cashier-Uid: example@admin
  + Body
        <!-- include(body/scenario/assortment.json) -->

## Создание продажи [/entity/retaildemand]
Теперь, имея открытую смену и справочник товаров, создадим пробную розничную продажу.

### Создание продажи [POST]
+ Request создание продажи (application/json)
Пример создания новой розничной продажи.
  + Headers
    Lognex-Pos-Auth-Token: 6ab89be1ae6ff147753335ee8da948e42612233b
    Lognex-Pos-Auth-Cashier-Uid: example@admin

  + Body
        <!-- include(body/scenario/demand_post_request.json) -->

+ Response 201
  + Body
        <!-- include(body/scenario/demand_post_response.json) -->


## Закрытие смены [/rpc/closeshift/]
По окончании работы закроем открытую нами ранее розничную смену.
### Закрытие смены [PUT]
В запрос передаём meta от ранее открытой смены, а также момент закрытия.

+ Request Пример (application/json)
Пример запроса на закрытие смены.
  + Headers
      Lognex-Pos-Auth-Token: 6ab89be1ae6ff147753335ee8da948e42612233b
      Lognex-Pos-Auth-Cashier-Uid: example@admin
  + Body
        <!-- include(body/scenario/close_request.json) -->
+ Response 204
  + Body
        <!-- include(body/scenario/open_put.json) -->
